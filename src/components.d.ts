/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';

import {
  MatchResults,
} from '@stencil/router';

declare global {
  interface HTMLAppHomeElement extends HTMLStencilElement {

  }
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLAppProfileElement extends HTMLStencilElement {
    'match': MatchResults;
  }
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-profile': JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      'match'?: MatchResults;
    }
  }
}


declare global {
  interface HTMLDocumentComponentElement extends HTMLStencilElement {
    'pageid': string;
    'pages': string[];
    'showPage': () => void;
  }
  var HTMLDocumentComponentElement: {
    prototype: HTMLDocumentComponentElement;
    new (): HTMLDocumentComponentElement;
  };
  interface HTMLElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  interface ElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'document-component': JSXElements.DocumentComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface DocumentComponentAttributes extends HTMLAttributes {
      'pageid'?: string;
      'pages'?: string[];
    }
  }
}


declare global {
  interface HTMLMyAppElement extends HTMLStencilElement {

  }
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLPageInboxElement extends HTMLStencilElement {
    'd': String;
    'match': MatchResults;
  }
  var HTMLPageInboxElement: {
    prototype: HTMLPageInboxElement;
    new (): HTMLPageInboxElement;
  };
  interface HTMLElementTagNameMap {
    'page-inbox': HTMLPageInboxElement;
  }
  interface ElementTagNameMap {
    'page-inbox': HTMLPageInboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-inbox': JSXElements.PageInboxAttributes;
    }
  }
  namespace JSXElements {
    export interface PageInboxAttributes extends HTMLAttributes {
      'd'?: String;
      'match'?: MatchResults;
    }
  }
}


declare global {
  interface HTMLPageWrapperElement extends HTMLStencilElement {
    'addDynamicTag': (myTag: any, myData?: {}, memory?: boolean) => void;
    'changePage': (value: any) => void;
    'doc': string;
    'pageid': string;
    'pages': string[];
    'showPage': (pageId: any) => void;
  }
  var HTMLPageWrapperElement: {
    prototype: HTMLPageWrapperElement;
    new (): HTMLPageWrapperElement;
  };
  interface HTMLElementTagNameMap {
    'page-wrapper': HTMLPageWrapperElement;
  }
  interface ElementTagNameMap {
    'page-wrapper': HTMLPageWrapperElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-wrapper': JSXElements.PageWrapperAttributes;
    }
  }
  namespace JSXElements {
    export interface PageWrapperAttributes extends HTMLAttributes {
      'doc'?: string;
      'pageid'?: string;
      'pages'?: string[];
    }
  }
}


declare global {
  interface HTMLTaskDetailElement extends HTMLStencilElement {
    'd': String;
    'match': MatchResults;
  }
  var HTMLTaskDetailElement: {
    prototype: HTMLTaskDetailElement;
    new (): HTMLTaskDetailElement;
  };
  interface HTMLElementTagNameMap {
    'task-detail': HTMLTaskDetailElement;
  }
  interface ElementTagNameMap {
    'task-detail': HTMLTaskDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'task-detail': JSXElements.TaskDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface TaskDetailAttributes extends HTMLAttributes {
      'd'?: String;
      'match'?: MatchResults;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
